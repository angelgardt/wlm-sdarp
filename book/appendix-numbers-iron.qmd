# Числа и железо {#appendix-numbers-iron}

{{< include other/_symbols.qmd >}}

```{r opts, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE, error=FALSE}
knitr::opts_chunk$set(echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE, error=FALSE)
```

:::{.intro}

Хранение чисел на железе компа --- дело достаточно хитрое. В большинстве случаев нам как практикам совершенно не обязательно знать, что происходит на столь низком уровне. И всё же как бы ни был высокоуровнев R, в итоге он всё равно работает на суровом железе. И когда мы себя уже довольно уверенно чувствуем с базовыми вещами в программировании, полезно узнать, как оно работает и к чему это может приводить.

:::

## Две внезапности {#appendix-numbers-iron-strange}

Давайте рассмотрим несколько прецедентов, чтобы лучше понять, почему в какой-то момент может понадобиться задуматься о процессах на уровне железа.

### $\sin \pi$

Не секрет[^trig-frm], что $\sin \pi = 0$. Однако если мы попробуем вычислить его в R, получим

[^trig-frm]: Нарисовано [тут](appendix-formulas.qmd#appendix-formulas-trig).

```{r sinpi}
sin(pi)
```

Это какое-то число, и оно явно не $0$. К слову, с $\tan \pi$ будет та же проблема:

```{r tanpi}
tan(pi)
```

Получается, R не знает базовой тригонометрии? Или не умеет считать?


### $0.36 + 0.46$ vs $0.82$

Довольно трудно оспорить, что $0.36 + 0.46 = 0.82$, и R готов с нами в этом согласиться:

```{r sum-doubles}
0.36 + 0.46
```

Конечно же, $0.82 = 0.82$:

```{r comp-same-doubles}
0.82 == 0.82
```

И было бы логично ожидать, что $0.36 + 0.42 == 0.82$ вернет `TRUE`, но, увы, это не так:

```{r comp-sum-doubles}
0.36 + 0.42 == 0.82
```

Можно было бы подумать, что это локальный баг, ведь

```{r comp-doubles-true}
0.5 + 0.4 == 0.9
1.8 + 6.2 == 8
3.31 - 12.64 == -9.33
16.12 * 12.16 == 196.0192
```

и много других примеров, которые работают так, как ожидается. Однако есть и сопоставимое количество примеров, которые работают не так, как мы ожидаем:

```{r comp-doubles-false}
10.10 * 11.11 == 112.221
0.555 * 5.055 == 2.805525
13.658 - 8.114 == 5.544
-4.123 / 2.123 == -1.942063
```

Почему так происходит? Начать разговор необходимо с системы счисления.



## Системы счисления {#appendix-numbers-iron-num-systems}

:::{#def-num-system}
**Система счисления (numeral system)** --- способ символического представления чисел.
:::

Иначе говоря, способ их записать с использованием неких символов. Эти символы именуются **цифрами**. Глобально системы счисления бывают *позиционные* и *непозиционные*.

* В **позиционных** системах счисления значение цифры *зависит от её позиции* в записи числа.
    * Так, $2$ в числе $42$ обозначает, собственно, $2$, а в числе $24$ --- $20$.
    * Большинство используемых на сегодняшний день систем счисления позиционные.
* В **непозиционных** системах счисления значение цифры *не зависит от её позиции* в записи числа.
    * Наиболее известная и широко используемая сегодня непозиционная система счисления --- римская: $\text{V}$ --- это всегда $5$, а $\text{L}$ --- 50. И в $\text{XLVI}$ ($46$), и в $\text{MDLXIV}$ ($1564$).

> Далее мы будем рассматривать только позиционные системы счисления, так как они оказались более удобными и получили наибольшее распространение.

Любая позиционная система счисления характеризуется **основанием** --- по факту, количеством цифр, используемых для записи чисел. Чтобы указать, в какой системе счисления записано некоторое число $x$, используется запись $x_b$, где $b$ --- основание системы счисления[^num-system-base]. Сама же система счисления с основанием $b$ будет называться **$b$-ичной**[^unary-system]:

[^num-system-base]: Тут же возникает вопрос: «А в какой системе счисления записать само основание, чтобы не возникло неоднозначности?». Решить этот вопрос можно по-разному --- мы, руководствуясь соображениями удобства, договоримся, что основание системы счисления будет всегда записано в *десятичной системе счисления*.

[^unary-system]: В принципе, единичная (унарная) система счисления тоже существует --- в ней используется единственная цифра $1$. Получается довольно неудобная конструкция, хотя такая система счисления является простейшей и, по-видимому, была исторически первой [@perelman1962, c. 61].

* двоичной ($b=2$)
* троичной ($b=3$)
* восьмеричной ($b=8$)
* десятичной ($b=10$)
* двенадцатеричной ($b=12$)
* шестнадцатеричной ($b=16$)
* двадцатеричной ($b=20$)
* шестидесятеричная ($b=60$)
* и т.д. 

Одно и то же число по-разному записывается в разных системах счисления:

$$
1111011_2 = 11120_3 = 173_8 = 123_{10} = \text{A}3_{12} = 7\text{B}_{16} = 63_{20}
$$

В любой позиционной системе счисления с основанием $b$ натуральное число представимо в виде суммы его цифр, помноженных на основание в некоторой степени:

$$
x = \overline{a_{n-1}a_{n-2} \ldots a_2a_1a_0} = \sum_{k=0}^{n-1} a_k b^{k},
$${#eq-num-system-basic}

где $a_k$ --- цифры ($0 \leq a_k \leq b-1$), $b^k$ --- **разряды**, $n$ --- количество разрядов в числе. Черта в $\overline{a_na_{n-1}a_{n-1} \ldots a_2a_1}$ обозначает, что эту запись необходимо читать как одно число, а не как произведение чисел.

Для чисел, не являющихся целыми, по аналогии можно сказать, что

$$
x = \overline{a_{n-1}a_{n-2} \ldots a_1a_0,a_{-1}a_{-2} \ldots a_{-(m-1)}a_{-m}} = \sum_{k=-m}^{n-1} a_k b^k
$${#eq-num-system-frac}

:::{.quote .small}
--- Очень как-то ты всё это абстрактно излагаешь. Можно какой-то конкретики?<br>
--- Сейчас будет.
:::

Мы рассмотрим три системы счисления, потому что именно они используются в программировании --- десятичную, двоичную и шестнадцатеричную[^other-num-systems].

[^other-num-systems]: О происхождении и использовании других систем счисления можно прочитать у @fomin1987.

:::{.callout-note appearance="simple"}
Далее если основание системы счисления не указано, считаем, что число записано в *десятичной системе счисления*.
:::


### Десятичная система счисления {#appendix-numbers-iron-bin}

Хорошая знакомая нам десятичная система счисления устроена следующим образом:

* основание системы $b$ --- $10$
* цифры --- $0$, $1$, $2$, $3$, $4$, $5$, $6$, $7$, $8$, $9$

Согласно [-@eq-num-system-basic], любое целое число $x$ в десятичной системе счисления можно представить как

$$
x = \overline{a_{n-1}a_{n-2} \ldots a_2a_1a_0} = \sum_{k=0}^{n-1} a_k 10^k
$$

Ну, сложно спорить с тем, что

$$
\begin{split}
1_{10} &= 1 \cdot 10^0 = 1\\
14_{10} &= 1 \cdot 10^1 + 4 \cdot 10^0 = 10 + 4 \\
286_{10} &= 2 \cdot 10^2 + 8 \cdot 10^1 + 6 \cdot 10^0 = 200 + 80 + 60 \\
9753_{10} &= 9\cdot 10^3 + 7 \cdot 10^2 + 5 \cdot 10^1 + 3 \cdot 10^0 = 9000 + 700 + 50 + 3 \\
\end{split}
$$

Согласно [-@eq-num-system-frac], дробное число[^dec-frac] $x$ в десятичной системе счисления можно представить как

[^dec-frac]: Здесь, безусловно, речь идет о *десятичных* дробях.

$$
x = \overline{a_{n-1}a_{n-2} \ldots a_1a_0,a_{-1}a_{-2} \ldots a_{-(m-1)}a_{-m}} = \sum_{k=-m}^{n-1} a_k 10^k
$$

Воистину справедливо, что

$$
\begin{split}
1.5 &= 1 \cdot 10^0 + 5 \cdot 10^{-1} = 1 + \frac{5}{10} \\
98.76 &= 9 \cdot 10^1 + 8 \cdot 10^0 + 7 \cdot 10^{-1} + 6 \cdot 10^{-2} = 90 + 9 + \frac{7}{10} + \frac{6}{100} \\
222.222 &= 2 \cdot 10^3 + 2 \cdot 10^1 + 2 \cdot 10^0 + 2 \cdot 10^{-1} + 2 \cdot 10^{-2} + 2 \cdot 10^{-3} = 200 + 20 + 2 + \frac{2}{10} + \frac{2}{100} + \frac{2}{1000} \\
\end{split}
$$

Собственно, и всё. Более тут обсуждать нечего.

:::{.quote .small}
--- Зачем вообще был нужен этот раздел... Мы и так каждый день с этим имеем дело...<br>
--- Ровно поэтому. Слишком интуитивна для нас десятичная система счисления, ведь мы ею пользуемся каждый день, не задумываясь. Но все системы счисления работают одинаково, поэтому сначала лучше эксплицировать хорошо знакомое, чтобы дальше проще было с незнакомым.
:::



### Двоичная система счисления {#appendix-numbers-iron-dec}






### Шестнадцатеричная система счисления {#appendix-numbers-iron-hex}



