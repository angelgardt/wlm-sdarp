# Знакомство с R {#r-intro}

{{< include other/_symbols.qmd >}}

```{r opts, echo=FALSE, eval=TRUE}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, warning = FALSE, message = FALSE, error = FALSE)
```

```{r pkgs, echo=FALSE}
library(tidyverse)
theme_set(theme_bw())
library(rvest)
library(leaflet)
```

:::{.intro}
В этой главе мы познакомимся с R. Начнем прям от Адама --- с установки и интерфейса. Если у вас уже установлены R и RStudio и вы хотите сразу стартовать с работы в среде, прыгайте [в следующую главу](r-basics.qmd).
:::




## Сверхкраткая история R {#r-intro-history}

:::{.lab-junior}
:::

R придумали Росс Ихака ([Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka)) и Роберт Джентльмен ([Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician))) в 1992 году в Департаменте статистики Университета Окленда ([Department of Statistics at Auckland](https://www.auckland.ac.nz/en/science/about-the-faculty/department-of-statistics.html), @fig-rbirthplace). Изначальная цель --- разработать язык, чтобы преподавать вводный курс статистики. За основу был взят язык S, разработанный [Bell Laboratories](https://en.wikipedia.org/wiki/Bell_Labs), и в 1994 году была завершена первая версия [@ross2022].

```{r map-rbirthplace, echo=FALSE}
#| code-fold: true
#| label: fig-rbirthplace
#| fig-cap: "Тут родился R"

leaflet() %>%
  addTiles() %>% 
  # addProviderTiles(providers$Stadia.AlidadeSmooth) %>% 
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

Через пару лет разработчики перестали справляться с [электронными] письмами о багах и предлагаемых улучшениях, и в 1997 году R становится частью [GNU Project](https://www.gnu.org/gnu/gnu.html) [@ross2022, p. 17]. В этом же году K. Hornik и F. Leisch создают на базе Венского технического университета (Technische Universität Wien) репозиторий [CRAN](https://cran.rstudio.com/) (The Comprehensive R Archive Network) для совместной работы «ядерной» группы разработчиков (core team). В феврале 2000 года выходит первая стабильная версия языка.

Сегодня R развивается международной командой исследователей вычислительной статистики ([R Project](https://www.r-project.org/)) и поддерживается некоммерческой организацией [R Foundation](https://www.r-project.org/foundation/).

:::{.callout-note appearance="minimal"}
###### Почему R так называется?

Это шутка авторов. «R» обозначает первую букву их имён (**R**obert и **R**oss) [@ross2022, p.12].
:::




## Обзор R {#rintro-overview}

:::{.lab-junior}
:::

R является свободным программным обеспечением, распространяемым по лицензии [GNU General Public License](https://www.r-project.org/COPYING). Создававшийся изначально как язык для статистических вычислений, он впоследствии существенно расширил свои возможности, и теперь его можно считать полноценным языком программирования[^r-not-proglang]. Хотя R и не является языком программирования общего назначения[^appendix-proglang-classifications] (general-purpose programming language), на нём можно:

* предобрабатывать и анализировать данные
* строить стильные и интерактивные визуализации
* создавать динамические отчеты, презентации и дашборды
* писать статьи, книги, сайты и приложения
* …

[^r-not-proglang]: Хотя относительного этого утверждения есть и другие мнения (см. [тред](https://www.reddit.com/r/learnprogramming/comments/75240o/why_is_the_r_programming_language_looked_at_with/), [пост](https://forum.posit.co/t/r-programming-not-a-real-language-pfffft/31453) и [пост](https://www.epatters.org/post/r-lang/)).

[^appendix-proglang-classifications]: Подробнее см. [приложение](appendix-proglang.qmd#proglang-classification-tasks).

Для R написано бесчисленное множество пакетов (@fig-n-pkgs), которые позволяют работать с самыми разными данными (поведенческими, опросниковыми, биологическими, лингвистическими, географическими и др.) и самыми разными статистическими методами (от t-теста до структурного моделирования). Количество доступных на CRAN пакетов экспоненциально растет с каждым годом.

```{r number-of-r-pkgs, echo=FALSE, cache=TRUE}
#| label: fig-n-pkgs
#| fig-cap: "Количество пакетов, доступное на CRAN. Столбцы отображаются пакеты, опубликованные в конкретном году, линия --- суммарное количество пакетов, опубликованное к данному году. Визуализация автора по [данным CRAN](https://cran.r-project.org/web/packages/available_packages_by_date.html)"

read_html("https://cran.r-project.org/web/packages/available_packages_by_date.html") %>%
  html_table() %>% .[[1]] %>% 
  mutate(year = str_extract(Date, "^\\d{4}")) %>% 
  summarise(n = n(),
            .by = year) %>% 
  arrange(year) %>% 
  mutate(cum_n = cumsum(n)) %>% 
  filter(year != "2008") %>% 
  ggplot(aes(x = year)) +
  geom_col(aes(y = n), fill = "royalblue") +
  geom_line(aes(y = cum_n), group = 1) +
  geom_point(aes(y = cum_n), size = 2) +
  labs(x = 'Год',
       y = "Количество")
```

R является **высокоуровневым**, **интерпретируемым**, **мультипарадигмальным**[^r-oop] языком программирования с **динамической типизацией**[^appendix-proglang-classifications-2]. У него очень простой, практически интуитивный, синтаксис, в результате чего --- низкий порог вхождения по сравнению с другими языками программирования.

[^r-oop]: Но глубоко внутри --- объектно-ориентированным.

[^appendix-proglang-classifications-2]: Подробнее в том же [приложении](appendix-proglang.qmd#proglang-classification-tasks).

R широко используется в академической среде исследователями социальных и гуманитарных наук, и, пожалуй, его можно назвать стандартом анализа данных де-факто в этих областях. Конечно, если его сравнивать со статистическими программами, предоставляющими графический интерфейс (Statistica, SPSS, JASP, Jamovi и др.), то порог вхождения тут будет выше, однако R позволяет организовать работу с данными так, чтобы она была **воспроизводима**, чем, увы, не могут похвалиться большинство программ с графическими интерфейсами.

Кроме того, реализация статистических методов в R часто требует копнуть в суть самих методов чуть глубже, чтобы корректно провести анализ, что, с одной стороны, может создать некоторые трудности, но, с другой стороны, **мотивирует лучше разобраться в методах анализа данных**, а значит, **более осознанно их использовать**.

В общем, R --- это стильно, модно и полезно.


### R vs Python {#rintro-r-vs-python}

:::{.lab-junior}
:::

![Великое противостояние. [Источник фона](https://www.freepik.com/author/jcomp)](img/r-intro/r-vs-py.jpg)

В мире дата-аналитики существует великое противостояние двух языков --- R и Python. На мой взгляд, довольно бессмысленное.

::::{.quote}
--- Я не могу решить, делать мне на R или на Python... <br>
--- Какая к черту разница! Главное --- делай! <br>

:::{.quote-sign}
Курилка на Армянском переулке около Департамента психологии НИУ ВШЭ <br>
Вторая половина 2010-х гг.
:::

::::

Хотя этот диалог случился, можно считать, довольно давно, он, как мне кажется, не утратил своей актуальности. Python --- язык программирования общего назначения, R --- больше специализирован на анализе данных. Первый имеет более широкие возможности, второй --- удобнее для аналитики. Для тех, у кого нет опыта программирования и кому сложно даются технические области, думаю, R будет проще. На мой взгляд, в Python от аналитики отвлекает ярко выраженное ООП (объектно-ориентированное программирование), которое в R спрятано глубоко под капот. Аналитика же по своей сути --- это диалог с данными, и в R его выстроить гораздо проще. Исходя из этого мой критерий следующий: для аналитики --- R, для всего остального --- Python.

Безусловно, это крайне субъективный критерий, и далеко не всем он покажется уместным и работающим. Есть другой --- в R гораздо более интуитивно реализована работа с данными (`tidyverse` очень сильно выигрывает в интуитивности у `pandas`), как и пакеты для сложных методов анализа (психометрический анализ, SEM, смешанные линейные модели и др.).

Впрочем, если вы открыли эту книгу, предполагаю, что вы заинтересованы именно в R, поэтому позволю себе свернуть обсуждение великого противостояния, и перейти к сути.




## Установка {#r-intro-installation}

:::{.lab-junior}
:::

Мы сейчас будем устанавливать все программы…[^fokin-meme]

[^fokin-meme]: На случай, если новое поколение утратило связь с культурным кодом прошлого, а старое поколение желает, чтобы ему подсвело олдскулы --- [источник](https://memepedia.ru/sashko-fokin/).

:::{.callout-warning}
###### Последовательность установки

Нам необходимо будет установить две вещи --- R и RStudio. Во избежании возможных ошибок необходимо их ставить именно в этом порядке: **сначала --- R, затем --- RStudio**. Иначе RStudio может не найти R на компе и будет ругаться.
:::


### Установка R {#r-intro-rinstallation}

:::{.lab-junior}
:::

Установить R можно с основного репозитория [CRAN (The Comprehensive R Archive Network)](https://cran.r-project.org/). Существуют версии R для всех трёх наиболее распространенных десктопных операционных систем:

* для [Win](https://cran.r-project.org/bin/windows/base/)
* для [macOS](https://cran.r-project.org/bin/macosx/)
* для [Linux](https://cran.rstudio.com/bin/linux/)

В целом, установщики операционных систем обычно хорошо справляются со своей задачей, и в 90% случаев всё встаёт без багов. Однако ниже я оставлю некоторые комментарии о проблемах, с которыми сталкивался сам или о которых говорили знакомые и коллеги.


#### Win {#rintro-rinstallation-win}

:::{.lab-junior}
:::

Ниже есть пример установки R на Win (@fig-rinstallation-win), если вдруг у вас возникли какие-то проблемы при установке. Скорее всего, всё прошло достаточно ровно.

Самая частая проблема --- имя пользователя на кириллице. Компьютер вообще достаточно плохо переваривает кириллические символы. Особенную же проблему составляют такие символы в путях к файлам. Поскольку на Win папка пользователя называется именем пользователя, то в случае кириллического имени, естественно, её имя будет на кириллице. Это можно пережить, перезадав некоторое дефолтные пути в настройках, однако если есть возможность переименовать пользователя и папку, я бы рекомендовал это сделать. Ну, так, чтобы не было неожиданных внезапностей.



#### macOS {#rintro-rinstallation-mac}

:::{.lab-junior}
:::

:::{.callout-important}
###### Apple silicon vs Intel Macs

Обратите внимание на [разные версии](https://cran.r-project.org/bin/macosx/) для Apple silicon (M1) и Intel Macs.
:::

Ниже есть пример установки R на Mac (@fig-rinstallation-mac), если вдруг у вас возникли какие-то проблемы при установке.

Тут в 99.9% случаев всё ровно. Бывает, что уже в процессе работы некоторые пакеты жалуются на недоустановленное что-то или на какие-либо несовместимости, но это случается невероятно редко и обычно достаточно легко лечится.



#### Linux {#rintro-rinstallation-linux}

:::{.lab-middle}
:::

:::{.callout-important}
###### Обилие дистрибутивов

Конечно, если вы работаете на Linux, то прекрасно знаете о дистрибутивах и их особенностях. Однако отмечу, что на разные дистрибутивы Linux устанавливаются [разные версии](https://cran.rstudio.com/bin/linux/) R.
:::

<!---
:::{.callout-note}
###### Примеры на Linux

Я работаю на Ubuntu (22.04), поэтому примеры для Linux будут приводится именно для этого дистрибутива. На других дистрибутивах могут быть свои особенности.
:::
--->

<!---Ниже есть пример установки R на Linux (Ubuntu) (@fig-rinstallation-linux), если вы только начинаете знакомство с Linux и у вас возникли какие-то проблемы при установке.--->

Раз вы пользователь Linux, значит вы, вероятно, ставите R через Terminal. Например, с помощью такой команды:

```
sudo apt install r-base-dev
```

Скорее всего, всё пройдет хорошо, и базовый R будет работать. Проблемки могут случиться чуть дальше, когда мы будем ставить дополнительные пакеты, в которых будет идти основная наша работа --- R может не найти некоторые системные пакеты. Такая проблема возникла у меня (на Ubuntu 22.04) --- помогла команда ниже:

```
sudo apt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev linfreetype6-dev libpng-dev libtiff5-dev libjpeg-deva
```

Сначала мы будем знакомиться с базовым R и работать только в нём, но имейте в виду, что тут есть некая команда, которая может пригодиться.



### Установка RStudio {#r-intro-rstudioinstallation}

:::{.lab-junior}
:::

Казалось бы, мы поставили R, и можно было бы на этом закончить. И это, в общем-то, правда --- [можно работать и просто в R](#r-intro-rinterface). Однако для упрощения работы и увеличения её приятности стоит установить RStudio[^rstudio-kek]. Установочные файлы лежат [тут](https://posit.co/download/rstudio-desktop/). Ниже есть примеры установки RStudio на Windows (@fig-rinstallation-win) и macOS (@fig-rinstallation-mac).

[^rstudio-kek]:По пути надо ещё не перепутать её с [R-Studio](https://www.r-studio.com/ru/), которая восстанавливает данные с диска. Критическое сходство названий двух программ обязывает к повышенной внимательности при написании работ/статей/отчётов/заявок на гранты, в которых вы упоминаете RStudio --- иногда рецензенты весьма недоумевают, как исследователи анализировали данные с помощью ПО для восстановления данных. Хотя это может звучать несколько странно, такой случай имел место в реальности…

RStudio --- это интегрированная среда разработки (IDE) (подробнее см. [тут](#rintro-ide)). Она расширяет возможности R, предоставляет более юзабельный интерфейс для взаимодействия с языком и в целом делает работу с R радостной и приятной.

RStudio не единственная среда для работы с R, но определенно самая удобная и популярная, поэтому мы будем пользоваться именно ею. RStudio является IDE, разработанной специально для работы в R, однако это вовсе не значит, что в ней нельзя использовать другие языки программирования. Например, книжка, которую вы сейчас читаете, написана с использованием [R](https://www.r-project.org/about.html), <!--[Python](https://www.python.org/), -->[HTML](http://htmlbook.ru/html), [SASS](https://sass-lang.com/), [JavaScript](https://learn.javascript.ru/), [YAML](https://yaml.org/) и других языков --- при этом вся работа велась в RStudio. Вот такая мощная вещь.



#### Что такое IDE? {#rintro-ide}

:::{.lab-junior}
:::

Интегрированная среда разработки (IDE, integrated development environment) --- это специальная программа, которое предоставляет широкий спектр возможностей для разработки программного обеспечения. Возможно, вы слышали такие слова, как [PyCharm](https://www.jetbrains.com/ru-ru/pycharm/) или [Visual Studio Code](https://code.visualstudio.com/) --- это всё варианты IDE.

Обычно IDE содержит несколько ключевых компонентов:

- текстовый редактор для написания скриптов
- [транслятор](appendix-proglang.qmd#proglang-translator) языка
- отладчик (debugger)
- средства автоматизации сборки (build automation tools)

Обычно IDE позволяют работать с несколькими языками программирования, но бывают и специализированные.

> И хотя всё ещё присутствует холивар относительного того, является ли R языком программирования, который отмечался в сносках, RStudio однозначно можно назвать полноценной IDE, так как разработка в ней вполне может вестить. Пример продукта разработки прямо перед вами --- книжка, которую вы сейчас читаете.


### Posit Cloud {#r-intro-positcloud}

:::{.lab-junior}
:::

В подавляющем большинстве случаев работа в R происходит на десктопной версии. Однако это не единственный вариант. Например, если вам нужно резко, быстро и несложно обработать небольшие данные, а вы в отпуске без своего любимого персонального компа, можно поработать в облачной версии RStudio --- [Posit Cloud](https://posit.cloud/).

В Posit Cloud используются RStudio Projects[^rstudio-projects-note], интерфейс полностью совпадает с десктопной версией RStudio, можно использовать дополнительные пакеты. Однако объем доступной оперативной памяти существенно ограничен, что, безусловно, может создать ряд сложностей. Тем не менее, такой вариант работы вполне можно рассмотреть в каких-то ограниченных условиях.

[^rstudio-projects-note]: Их мы будем обсуждать в [разделе о работе с данными](r-data.qmd#r-data-rstudio-projects).

***

:::{#fig-rinstallation-win}

{{< video https://youtu.be/34klooQ2Adw >}}

Установка R и RStudio на Windows (на примере Windows 10 Pro)
:::

:::{#fig-rinstallation-mac}

{{< video https://youtu.be/aQKfTrkRy2I >}}

Установка R на macOS (на примере macOS Sonoma 14.1.1)
:::




## Интерфейс R {#r-intro-rinterface}

:::{.lab-junior}
:::

![Логотип R. [Источник](https://www.r-project.org/logo/)](img/r-intro/r-logo.png){#fig-r-logo}

На самом деле, RStudio можно было и не ставить, так как R предоставляет собственный графический интерфейс для работы. Его можно открыть, кликнув на иконку R в списке программ вашего компа (@fig-r-logo). Однако, как вы можете видеть, он довольно скудный (@fig-r-interface).

![Интерфейс R](img/r-intro/r-interface.png){#fig-r-interface}

Здесь есть всего два окна: справа --- консоль, слева --- скрипт. В скрипте пишется код, в консоли он выполняется. Иногда еще открываются окна с графиками. Стильно, модно, минималистично --- весьма по-программистски. Однако в RStudio работу можно обустроить гораздо удобнее и нагляднее, поэтому не будем останавливаться здесь долго и сразу же перейдем к изучению установленной IDE.



## Интерфейс RStudio {#r-intro-rstudiointerface}

:::{.lab-junior}
:::

![Логотип RStudio. [Источник](https://www.rstudio.com/about/logos/)](img/r-intro/rstudio-logo.png){#fig-rstudio-logo}

Чтобы открыть RStudio, надо найти её иконку (@fig-rstudio-logo) в списке программ на вашем компе. Открыв программу, вы увидите что-то такое (@fig-rstudio-interface).

![Интерфейс RStudio](img/r-intro/rstudio-interface.png){#fig-rstudio-interface}

:::{.callout-tip}
###### Нет первого окна

При самом первом открытии RStudio у вас может отображаться не четыре окна, как на скриншоте выше (@fig-rstudio-interface), а только три --- второе, третье и четвертое. Чтобы первое окно появилось, нажмите сочетание клавиш `Ctrl`+`Shift`+`N` (`⌘`+`Shift`+`N` на Mac) или воспользуйте кнопкой в левом верхнем углу и выберите `R Script`.

![Создание нового скрипта](img/r-intro/new-rscript.png)
:::

:::{.callout-note collapse="true"}
###### У меня не тот цвет

Не беда. RStudio можно кастомизировать под себя, в том числе задать разные темы и стили оформления кода. Об этом будет [ниже](#r-intro-rstudiocustomize).
:::

Что же у нас есть в представленных окнах?

1. `Code Editor`
    - Это редактор кода. По сути это не более чем обычный блокнот, встроенный в IDE, с той лишь разницей, что некоторые слова подкрашиваются по определенным правилам. В этом окне мы будем писать *текст* скрипта.
    - В этом же окне будут открывать скриптовые файлы, которые были вами или кем-то ранее написаны. Скриптовые файлы языка R получают расширение `.R`, то есть какой-то скрипт будет называться `script.R`, однако это всё ещё обычный текстовый файл, который можно откыть в любом текстовом редакторе (типа Notebook или TextEdit).
    - Скрипт состоит из команд, которые мы хотим выполнить, но в самом скрипте они выполнить не могут, поэтому нам нужна консоль.
2. `Console`[^rterminal-bgjobs]
    - В консоли также можно писать команды и выполнять их прямо на месте --- получается максимально интерактивный режим работы. Однако после выполнения команды нигде не сохраняются[^rhistory].
    - Получается, что в работе над анализом данных удобно разнести задачи между консолью и редактором кода: в редакторе мы пишем команды, в консоли --- их выполняем.
3. В этом окне есть несколько вкладок. 
    - Главная --- это `Environment`. Это наше [глобальное] окружение. Здесь будут отображаться объекты, с которыми мы работаем --- переменные, датасеты, результаты моделирования и др.
    - На вкладке `History` хранится история выполнения команд, иногда она может пригодится, но собственно вкладкой пользуются, скорее, редко.
    - Другие вкладки отсюда мы использовать не будем.
4. Это очень полезное окно.
    - Во-первых, здесь есть вкладка `Files`, с помощью которой можно гулять по папкам и файлам. В первое время мы не будем активно обращать на неё внимание, однако когда перейдем к разговору о [работе с данными](r-data.qmd) и [проектах](r-data.qmd#r-data-rstudioprojects), она нам будет очень важна.
    - На вкладке `Plots` будут отображаться построенные графики.
    - Вкладка `Packages` помогает сориентироваться в установленных и подключенных пакетах[^rpackages].
    - В `Help` мы будем обращаться часто --- уже буквально через несколько мгновений изучим эту вкладку на практике. Здесь отображается документация. К ней стоит обращаться, если возникают какие-либо проблемы и непонятки с тем, как использовать ту или иную функцию.
    - `Viewer` и `Presentation` --- редко используемые вкладки, по крайнем мере, в первое время работы. Они необходимы, когда вы создаете какие-либо материалы в R (презентации, сайты, отчеты, книжки и др.)

[^rterminal-bgjobs]: Есть еще вкладки `Terminal` и `Background Jobs`. Пока что их проигнорируем, ибо и так других миллион. К этим двум обратимся, когда дойдем до соответствующих тем.
[^rhistory]: Это не совсем правда, так как есть файл `.Rhistory`, о нем поговорим чуть дальше.
[^rpackages]: Хотя мы сделаем упор на работе с пакетами через скрипт --- это поможет повысить воспроизводимость кода.



### Кастомизация RStudio {#r-intro-rstudiocustomize}

:::{.lab-junior}
:::

После некоторого времени работы в RStudio, вы можете обнаружить, что предлагаемые по умолчанию конфигурация и оформление вам не очень удобны. Скажем, вы как истинный программист работаете по ночам, и дефолтная светлая тема оформления вам крайне больно бьет по глазам, и вы хотите расположить консоль рядом со скриптом, чтобы видеть результаты выполнения команд примерно на том же уровне, что и строки кода. Всё это выполнимо.

Здесь мы рассмотрим две, пожалуй, ключевых вещи, которые можно настроить --- [окна](#r-intro-panelayout) и [тему](#r-intro-appearance). В остальных возможностях, я уверен, вы сможете разобраться самостоятельно, понажимав на всякие кнопки или изучив [**RStudio User Guide**](https://docs.posit.co/ide/user/).


#### Тема {#r-intro-appearance}

:::{.lab-junior}
:::

Чтобы настроить тему RStudio, необходимо проследовать по пути `Tools` → `Global Options` → `Appearance`. Откроется следующее окно (@fig-rstudio-appearance). В нем можно выбрать шрифт, его размер, тему самого RStudio и тему редактора кода. Через кнопку `Add...` можно даже добавить собственные темы, если вам не нравится ни одна из предложенных.

![Настройки темы RStudio](img/r-intro/rstudio-appearance.png){#fig-rstudio-appearance}



#### Расположение окон и их содержимое {#r-intro-panelayout}

:::{.lab-junior}
:::

Чтобы настроить расположение и содержимое окон, необходимо проследовать по пути `Tools` → `Global Options` → `Pane Layout`. Откроется следующее окно (@fig-rstudio-panelayout). Логика проста: здесь тоже четыре области, соответствующих окнам интерфейса RStudio, и в каждом можно выбрать, что должно отображаться. Через `Add Column` можно добавить ещё одну колонку, если вы, скажем, работаете на большом мониторе в двух скриптах параллельно.

![Настройки расположения окон и их содержимого](img/r-intro/rstudio-panelayout.png){#fig-rstudio-panelayout}



***

###### Session Info {#session_info .unnumbered}

```{r session-info}
sessionInfo()
```

```{=html}
<script type="text/javascript" src="./js/chapter.js"></script>
```
