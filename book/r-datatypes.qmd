# Типы данных {#r-datatypes}

{{< include other/_symbols.qmd >}}

```{r opts, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE, error=FALSE}
knitr::opts_chunk$set(echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE, error=FALSE)
```

```{r pkgs, echo=FALSE}
library(tidyverse)
theme_set(theme_bw())
library(rvest)
```

:::{.intro}
Вступление
:::


**Тип данных** --- это характеристика данных, которая определяет:

* **множество допустимых значений**, которые могут принимать данные этого типа
* **допустимые операции** над данными этого типа

### `numeric`

Это числа с десятичной частью.

```{r}
class(3.14)
typeof(3.14)
```

`"double"` нам говорит о том, что числа с десятичной частью храняться в R с двойной точностью. И это хорошо.


### `integer`

Это целые числа.

```{r}
class(3)
```

Правда чтобы создать именно целое число, надо указать, что мы хотим именно целое число с помощью литерала `L`:

```{r}
class(3L)
typeof(3L)
```

По умолчанию объект типа `3` воспринимается R как `3.0`, поэтому тип данных будет `numeric`.


### `complex`

Комплексные числа тоже существуют, и мы с ними немного познакомимся, чтобы перестать их бояться.

```{r}
class(2+3i)
```

### `logical`

### Логические операторы


### `character`

Текст тоже надо как-то хранить.

```{r}
s1 <- 'a'
s2 <- "это строка"

class(s1)
class(s2)
```

Кавычки не важны, если у вас не встречаются кавычки внутри кавычек. Тогда надо использовать разные:

```{r}
s <- 'Мужчина громко зашёл в комнату и высказал решительное "здравствуйте"'
s
```

### `factor`

Бывают такие переменные, которые группируют наши данные. Например,

- город проживания (`Москва`, `Санкт-Петербург`, `Казань`, `Екатеринбург`)
- уровень образования (`бакалавриат`, `специалитет`, `магистратура`, `аспирантура`)
- экспериментальная группа (`group1`, `group2`, `control`)
- и др.

Обычно они текстовые. Для них был придуман тип данных `factor`, чтобы их было дешевле хранить. Однако большинство современных пакетов сами могут решить, когда надо текст перевести в фактор.

`Ordered factor` (**упорядоченный фактор**) --- тип данных, который позволяет задать порядок групп. Например,

- уровень образования: `bachelor` < `master` < `phd` < `postdoc`
- сложность экспериментальной задачи: `easy` < `medium` < `hard`
- и др.

Вот упорядоченный фактор нам время от времени может понадобиться --- например, для создания визуалиация или в некоторых статистических моделях.


### Специальные литералы

#### `NA`

Пропущенное значение (**N**ot **A**vailable). Обозначает отсутствие значения там, где оно вроде бы должно быть. Причины могут быть разные:

- технические ошибки записи данных
- ошибки настройки платформы --- забыли сделать ответы обязательными
- организация исследования --- ограничили время на ответ
- «честный» пропуск --- дали возможность не отвечать на вопрос
- предобработка данных --- специально создали `NA`, чтобы далее с ними работать
- и др.


#### `NaN`

Это не число (**N**ot **a** **N**umber).

```{r}
0 / 0
```


#### `NULL`

Это ничто. Пустота. Используется для задания аргументов функций.

```{r, eval=FALSE}
ggplot(data = NULL)
```












::::{.quote}
--- Текст цитаты <br>
--- Тоже текст цитаты <br>

:::{.quote-sign}
Источник цитаты <br>
Год цитаты
:::

::::

> Цитата




## Заголовок раздела {#chapterid-sectionid}

:::{.lab-junior}
:::

Тест со [ссылкой](debug_quiz.qmd).


### Заголовок подраздела {#chapterid-subsectionid}

:::{.lab-junior}
:::

Тест со [ссылкой](debug_sheet.qmd).




## Примеры `кода` {#chapterid-code-examples}

:::{.lab-middle}
:::


### Чанк без подписи {#chapterid-code-nolst}

```{r simple-chunk}
## подключаем самую лучшую библиотеку
library(tidyverse)
theme_set(theme_bw()) ## устанавливаем тему

head(diamonds)

```


### Чанк с подписью {#chapterid-code-lst}

::: {#lst-code-example}

```{r code-example, eval=FALSE}
ds <- tibble()

for (i in 1:100) {
  if (i %% 2 == 1) {
    read_csv(files[i]) %>% 
      bind_rows(ds) -> ds
  } else {
    print('a')
    stop()
  }
}
```

Пример чанка с подписью

:::

Ссылка на чанк с подписью (@lst-for-example).


### Аннотированный чанк {#chapterid-code-annotated}

::: {#lst-code-annotated}

```{r annotated-chunk}
## большой код для агрегации

diamonds %>% # <1>
  summarise(mean_price_cut = mean(price), # <2>
            sd_price_cut = sd(price),
            .by = cut) %>% 
  right_join(diamonds, join_by(cut)) %>% # <3>
  mutate(price_group = ifelse(price > mean_price_cut + sd_price_cut, "expensive", # <4>
                              ifelse(price < mean_price_cut - sd_price_cut, "cheap",
                                     "average")))
```
1. Берем датасет `diamonds`, что нарисовать график про бриллианты
2. Рассчитываем базовые описательные статистики
3. Объединяем агрегированные данные с исходными
4. Разделяем наблюдения на группы

:::




## Примеры иллюстраций {#chapterid-figures}

:::{.lab-senior}
:::


### Импорт графического файла {#chapterid-import-pic}

Ссылка на импортированную картинку (@fig-gh-soc-preview):

![Превью репозитория](img/test-gh-social-preview.png){#fig-gh-soc-preview}


### График, построенный с помощью кода {#chapterid-plot}

```{r plot-huge-chunk}
#| label: fig-huge-chunk
#| fig-cap: "Это картинка, нарисованная большим кодом"

## большой код для графика

diamonds %>% # <1>
  summarise(mean_price_cut = mean(price),
            sd_price_cut = sd(price),
            .by = cut) %>% 
  right_join(diamonds, join_by(cut)) %>%
  mutate(price_group = ifelse(price > mean_price_cut + sd_price_cut, "expensive",
                              ifelse(price < mean_price_cut - sd_price_cut, "cheap",
                                     "average"))) %>% 
  ggplot(aes(clarity, price,
             shape = price_group, color = color)) +
  stat_summary(geom = "pointrange", 
               fun.data = mean_cl_boot,
               position = position_dodge(.3)) +
  scale_shape_manual(values = c(21, 22, 23)) +
  theme(legend.position = "bottom")
```


```{r plot-huge-chunk-annotated}
#| label: fig-huge-chunk-annotated
#| fig-cap: "Это картинка, нарисованная большим кодом, который аннотирован"

## большой код для графика

diamonds %>% # <1>
  summarise(mean_price_cut = mean(price), # <2>
            sd_price_cut = sd(price),
            .by = cut) %>% 
  right_join(diamonds, join_by(cut)) %>% # <3>
  mutate(price_group = ifelse(price > mean_price_cut + sd_price_cut, "expensive", # <4>
                              ifelse(price < mean_price_cut - sd_price_cut, "cheap",
                                     "average"))) %>% 
  ggplot(aes(clarity, price, # <5>
             shape = price_group, color = color)) +
  stat_summary(geom = "pointrange", 
               fun.data = mean_cl_boot,
               position = position_dodge(.3)) +
  scale_shape_manual(values = c(21, 22, 23)) +
  theme(legend.position = "bottom")
```
1. Берем датасет `diamonds`, что нарисовать график про бриллианты
2. Рассчитываем базовые описательные статистики
3. Объединяем агрегированные данные с исходными
4. Разделяем наблюдения на группы
5. Начинаем рисовать


### Несколько изображений в одной иллюстрации {#chapterid-several-pics}

:::{#fig-merging-joins layout-nrow=2}
![left_join(x, y)](img/data-wrangling/left_join.png){#fig-left-join}

![right_join(x, y)](img/data-wrangling/right_join.png){#fig-right-join}

![full_join(x, y)](img/data-wrangling/full_join.png){#fig-full-join}

![inner_join(x, y)](img/data-wrangling/inner_join.png){#fig-inner-join}

Объединяющие джойны
:::


```{r several-plots-one-figure-plots}
plot(0:1) -> plot1
plot(0:2) -> plot2
plot(0:3) -> plot3
plot(0:4) -> plot4
```

```{r several-plots-one-figure}
#| label: fig-several-plots-one-figure
#| fig-cap: "Несколько картинок с помощью кода в одной иллюстрации"
#| fig-subcap:
#|   - "Картинка 1"
#|   - "Кртинка 2"
#|   - "Картинка 3"
#|   - "Картинка 4"
#| layout-ncol: 2

print(plot1)
print(plot2)
print(plot3)
print(plot4)
```


### Карта {#chapterid-map}

```{r leaflet-map, echo=FALSE}
#| code-fold: true
#| label: fig-rbirthplace
#| fig-cap: "Тут родился R"

library(leaflet)
leaflet() %>%
  addTiles() %>% 
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

Ссылка неа карту (@fig-rbirthplace).


### Видео {#chapterid-video}

:::{#fig-razbor}

{{< video https://youtu.be/WoffShoneY8?si=Du9xHiOVBHZaOYuE >}}

Разбор третьей домашки
:::

Ссылка на видео (@fig-razbor).


### Схема {#chapterid-scheme}

```{mermaid}
%%| label: fig-mermaidtest
%%| fig-cap: Это схема из Mermaid
%%| fig-align: center

flowchart LR
  A(Step 1) --> B(Step 2)
  B --> C(Step 3)
  C --> D(Step 4)
  D --> E(Step 5)
  E --> A
```

Ссылка на схему (@fig-mermaidtest).




## Таблицы {#chapterid-tables}

Ссылка на таблицу из `tibble` (@tbl-kabletable).

Ссылка на таблицу из R Markdown (@tbl-markdowntable).


### Таблица из `kable()` {#chapterid-kabletable}

::: {#tbl-kabletable}

```{r}
#| echo: false

tibble(A = 1:3, B = c("akjsfv", "akejrhvae", "kvuhaefrv")) %>% 
knitr::kable()
```

Это kable-таблица

:::


### Таблица из R Markdown {#chapterid-markdowntable}

::: {#tbl-markdowntable}

| A 	|  B  	|  C  	|          D         	|
|---	|:---:	|:---:	|:------------------:	|
| 1 	| abc 	|  да 	|     $\sin (2)$     	|
| 2 	| def 	| нет 	|   $\sqrt {4+2i}$   	|
| 3 	| ghi 	|  да 	| $e^{i\pi} + 1 = 0$ 	|

Это Markdown-таблица

:::

## Математика {#chapterid-math}

Это уравнение прямой (@eq-line):

$$
y = kx + b
$$ {#eq-line}

::: {#thm-nonbiasmean}
Это теорема.
:::

:::{.proof}

Это доказательство.

$$ 
X_1, X_2, \dots , X_n \overset{\iid}{\thicksim} (\mu, \sigma^2)
$$

:::

::: {#lem-test}
Это лемма.
:::

::: {#cor-test}
Это следствие.
:::

::: {#prp-test}
Это утверждение.
:::

::: {#cnj-test}
Это conjecutre.
:::

::: {#def-test}
Это определение.
:::

::: {#exm-test}
Это пример.
:::

::: {#exr-test}
Это задание.
:::

::::{.solution}

:::{.cell}
Это решение
:::
::::

::: {.solution}
<!--Это решение, где есть только код.-->
```{r}
print(0)
```
:::

::: {.remark}
Это замечание.
:::




## Блоки {#chapterid-callouts}

:::{.callout-note}
###### Заголовок заметки

Текст заметки.
:::

:::{.callout-tip}
###### Заголовок лайфхака

Текст лайфхака.
:::

:::{.callout-warning}
###### Заголовок предупреждения

Текст предупреждения.
:::

:::{.callout-important}
###### Заголовок важности

Текст важности.
:::

:::{.callout-caution collapse="true"}
###### Заголовок предупреждения

Текст предупреждения.
:::

```{=html}
<script type="text/javascript" src="./js/chapter.js"></script>
```
