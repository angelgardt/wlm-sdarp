# Матан {#math-calculus}

{{< include other/_symbols.qmd >}}

```{r opts, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE, error=FALSE}
knitr::opts_chunk$set(echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE, error=FALSE)
```

```{r pkgs, echo=FALSE}
library(tidyverse)
theme_set(theme_bw())
theme_update(legend.position = "bottom")
library(latex2exp)
```

:::{.intro}
Вступление
:::


## Линейные преобразования функции и её аргумента {#math-calculus-linear-transform}

```{r transform-funs, echo=FALSE}
logfun <- function(x) { exp(x) / (1 + exp(x)) }
# tfun1 <- function(x, k = 1, m = 0, a = 1, b = 0) {
#   a * ((k * x + m)^2) + b
# }
tfun2 <- function(x, k = 1, m = 0, a = 1, b = 0) {
  a * (sin(k * x + m)) + b
}
tfun3 <- function(x, k = 1, m = 0, a = 1, b = 0) {
  a * (logfun(k * x + m)) + b
}
```

```{r default-funs, echo=FALSE}
tibble(x = seq(-6, 6, by = .01),
       # default_y1 = tfun1(x),
       default_y2 = tfun2(x),
       default_y3 = tfun3(x)
       ) -> fun_transform
```

```{r, echo=FALSE}
fun_transform %>% 
  pivot_longer(cols = -x, values_to = "y") %>% 
  separate(name, into = c("transform", "fun"), sep = "_") %>% 
  ggplot(aes(x, y)) +
  geom_line() +
  facet_grid(. ~ fun)
```

Это то, что в школьной математике обычно называют «преобразованиями графиков функций».

Линейные преобразования можно обобщить следующим образом: они позволяют функцию $y = f(x)$ превратить в функции такого вида

$$
y = a f(kx + m) + b
$$

Но здесь произошло много всего сразу. Давайте раздербаним это на части и рассмотрим каждое преобразование отдельно.

### Параллельный перенос вдоль оси абсцисс {#math-calculus-linear-transform-parallel-x}

$$
y = f(x + m)
$$

```{r, echo=FALSE}
fun_transform %>% 
  mutate(
    # mpos_y1 = tfun1(x, m = 1),
    mpos_y2 = tfun2(x, m = 1),
    mpos_y3 = tfun3(x, m = 1),
    
    # mneg_y1 = tfun1(x, m = -1),
    mneg_y2 = tfun2(x, m = -1),
    mneg_y3 = tfun3(x, m = -1),
  ) %>% 
  pivot_longer(cols = -x, values_to = "y") %>% 
  separate(name, into = c("transform", "fun"), sep = "_") %>% 
  ggplot(aes(x, y, color = transform)) +
  geom_line() +
  facet_wrap(~ fun, 
             scale = "free_y")
```

### Параллельный перенос вдоль оси ординат {#math-calculus-linear-transform-parallel-y}

$$
y = f(x) + b
$$

```{r, echo=FALSE}
fun_transform %>% 
  mutate(
    #bpos_y1 = tfun1(x, b = 2),
    bpos_y2 = tfun2(x, b = 1),
    bpos_y3 = tfun3(x, b = 1),
    
    #bneg_y1 = tfun1(x, b = -2),
    bneg_y2 = tfun2(x, b = -1),
    bneg_y3 = tfun3(x, b = -1),
  ) %>% 
  pivot_longer(cols = -x, values_to = "y") %>% 
  separate(name, into = c("transform", "fun"), sep = "_") %>% 
  ggplot(aes(x, y, color = transform)) +
  geom_line() +
  facet_wrap(~ fun, 
             scale = "free_y")
```

### Сжатие и растяжение вдоль оси абсцисс {#math-calculus-linear-transform-compress-x}

$$
y = f(kx)
$$

```{r, echo=FALSE}
fun_transform %>% 
  mutate(
    #kgr1_y1 = tfun1(x, k = 2),
    kgr1_y2 = tfun2(x, k = 2),
    kgr1_y3 = tfun3(x, k = 2),
    
    #kle1_y1 = tfun1(x, k = .5),
    kle1_y2 = tfun2(x, k = .5),
    kle1_y3 = tfun3(x, k = .5),
  ) %>% 
  pivot_longer(cols = -x, values_to = "y") %>% 
  separate(name, into = c("transform", "fun"), sep = "_") %>% 
  ggplot(aes(x, y, color = transform)) +
  geom_line() +
  facet_wrap(~ fun, 
             scale = "free_y")
```

### Сжатие и растяжение вдоль оси ординат {#math-calculus-linear-transform-compress-y}

$$
y = af(x)
$$

```{r, echo=FALSE}
fun_transform %>% 
  mutate(
    #agr1_y1 = tfun1(x, a = 2),
    agr1_y2 = tfun2(x, a = 2),
    agr1_y3 = tfun3(x, a = 2),
    
    #ale1_y1 = tfun1(x, a = .5),
    ale1_y2 = tfun2(x, a = .5),
    ale1_y3 = tfun3(x, a = .5),
  ) %>% 
  pivot_longer(cols = -x, values_to = "y") %>% 
  separate(name, into = c("transform", "fun"), sep = "_") %>% 
  ggplot(aes(x, y, color = transform)) +
  geom_line() +
  facet_wrap(~ fun, 
             scale = "free_y")
```

### Отражение относительно оси абсцисс {#math-calculus-linear-transform-flip-x}

$$
y = -f(x)
$$

```{r, echo=FALSE}
fun_transform %>% 
  mutate(
    #aneg1_y1 = tfun1(x, a = -1),
    aneg1_y2 = tfun2(x, a = -1),
    aneg1_y3 = tfun3(x, a = -1),
    
    #anegle1_y1 = tfun1(x, a = .5),
    anegle1_y2 = tfun2(x, a = -.5),
    anegle1_y3 = tfun3(x, a = -.5),
    
    #anegle1_y1 = tfun1(x, a = -2),
    aneggr1_y2 = tfun2(x, a = -2),
    aneggr1_y3 = tfun3(x, a = -2),
  ) %>% 
  pivot_longer(cols = -x, values_to = "y") %>% 
  separate(name, into = c("transform", "fun"), sep = "_") %>% 
  ggplot(aes(x, y, color = transform)) +
  geom_line() +
  facet_wrap(~ fun, 
             scale = "free_y")
```


### Отражение относительно оси ординат {#math-calculus-linear-transform-flip-y}

$$
y = f(-x)
$$

```{r, echo=FALSE}
fun_transform %>% 
  mutate(
    #aneg1_y1 = tfun1(x, a = -1),
    aneg1_y2 = tfun2(x, k = -1),
    aneg1_y3 = tfun3(x, k = -1),
    
    #anegle1_y1 = tfun1(x, a = .5),
    anegle1_y2 = tfun2(x, k = -.5),
    anegle1_y3 = tfun3(x, k = -.5),
    
    #aneggr1_y1 = tfun1(x, a = -2),
    aneggr1_y2 = tfun2(x, k = -2),
    aneggr1_y3 = tfun3(x, k = -2),
  ) %>% 
  pivot_longer(cols = -x, values_to = "y") %>% 
  separate(name, into = c("transform", "fun"), sep = "_") %>% 
  ggplot(aes(x, y, color = transform)) +
  geom_line() +
  facet_wrap(~ fun, 
             scale = "free_y")
```


### Модуль функции и функция от модуля аргумента {#math-calculus-linear-transform-abs}

Вообще-то **модуль не является линейным преобразованием**, однако в школьной программе обычно эти преобразования рассматриваются вместе со всеми остальными --- мы их тоже докинем сюда для полноты картины, хотя мы с ними не будем иметь дело.




***

###### Session Info {#session_info .unnumbered}

```{r session-info}
sessionInfo()
```

```{=html}
<script type="text/javascript" src="./js/chapter.js"></script>
```
